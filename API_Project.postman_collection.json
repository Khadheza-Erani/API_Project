{
	"info": {
		"_postman_id": "505edfe0-8d0e-410c-ad88-9b0fcb18a2f6",
		"name": "API_Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28839508"
	},
	"item": [
		{
			"name": "Student Status Code Validation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName =pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"firstName\",firstName);\r",
							"console.log(\"firstName\", firstName)\r",
							"\r",
							"var middleName =pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"middleName\",middleName);\r",
							"console.log(\"middleName\",  middleName)\r",
							"\r",
							"var lastName =pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"lastName\",lastName);\r",
							"console.log(\"lastName\", lastName)\r",
							"\r",
							"//Genrate random Date of Birth in MM/DD/YY Format and the DOB always fall in between 1990 and 1999\r",
							"function randomDate(start, end) {\r",
							"        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"}\r",
							"var date = randomDate(new Date(2000, 0, 1), new Date());\r",
							"var year_last_integer = Math.floor(Math.random() * 10);\r",
							"var formattedDate = (date.getMonth()+1) + '/' + date.getDate() + '/' +  '199' + year_last_integer;\r",
							"pm.environment.set(\"dob\", formattedDate);\r",
							"console.log(\"DOB: \" + formattedDate);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response =responseCode.code;\r",
							"\r",
							"switch(response){\r",
							" case 201:\r",
							" var jsonData =pm.response.json()\r",
							" pm.test(\" successful\")\r",
							" pm.environment.set(\"id\", jsonData.id)\r",
							" break;\r",
							"\r",
							"  case 202:\r",
							"  pm.test(\" This is accepted\")\r",
							"  break;\r",
							"\r",
							"  case 302:\r",
							"  pm.test(\"Found\")\r",
							"  break;\r",
							"\r",
							"  case 304:\r",
							"  pm.test(\"This is not modified\")\r",
							"  break;\r",
							"\r",
							"  case 400:\r",
							"  pm.test(\"Bad Request\")\r",
							"  break;\r",
							"\r",
							"  case 401:\r",
							"  pm.test(\"Unauthorized\")\r",
							"  break;\r",
							"\r",
							"  case 402:\r",
							"  pm.test(\"Payment Required\")\r",
							"  break;\r",
							"\r",
							"  case 403:\r",
							"  pm.test(\"Forbidden\")\r",
							"  break;\r",
							"\r",
							"  case 404:\r",
							"  pm.test(\"Not Found\")\r",
							"  break;\r",
							"\r",
							"  case 405:\r",
							"  pm.test(\"Method Not Allowed\")\r",
							"  break;\r",
							"\r",
							"   case 500:\r",
							"  pm.test(\"Internal Server Error\")\r",
							"  break;\r",
							"\r",
							"   case 501:\r",
							"  pm.test(\"Not Implemented\")\r",
							"  break;\r",
							"\r",
							"\r",
							"  case 502:\r",
							"  pm.test(\"Bad Gateway\")\r",
							"  break;\r",
							"\r",
							"  case 503:\r",
							"  pm.test(\"Service Unavailable\")\r",
							"  break;\r",
							"        pm.globals.get(\"variable_key\");\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"first_name\": \"{{firstName}}\", \r\n\"middle_name\": \"{{middleName}}\", \r\n\"last_name\": \"{{lastName}}\", \r\n\"date_of_birth\": \"{{dob}}\" \r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/studentsDetails",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				}
			},
			"response": []
		},
		{
			"name": "Code Validation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var response =responseCode.code;\r",
							"\r",
							"switch(response){\r",
							" case 200:\r",
							" var jsonData =pm.response.json()\r",
							" pm.test(\" Students firstName Validation \",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"first_Name\"));\r",
							"   //console.log(jsonData.data.first_name)\r",
							" })\r",
							"\r",
							" pm.test(\" Students middle_Name Validation \",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.middle_Name).to.eql(pm.environment.get(\"middle_Name\"));\r",
							"   //console.log(jsonData.data.middle_Name)\r",
							" })\r",
							"\r",
							"pm.test(\" Students last_Name Validation \",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.last_Name).to.eql(pm.environment.get(\"last_Name\"));\r",
							"   //console.log(jsonData.data.last_Name)\r",
							" })\r",
							"\r",
							" pm.test(\"Students date_of_birth Validation \",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.date_of_birth ).to.eql(pm.environment.get(\"date_of_birth \"));\r",
							"   //console.log(jsonData.data.date_of_birth )\r",
							" })\r",
							"\r",
							" break;\r",
							"\r",
							"  case 202:\r",
							"  pm.test(\" This is accepted\")\r",
							"  break;\r",
							"\r",
							"  case 302:\r",
							"  pm.test(\"Found\")\r",
							"  break;\r",
							"\r",
							"  case 304:\r",
							"  pm.test(\"This is not modified\")\r",
							"  break;\r",
							"\r",
							"  case 400:\r",
							"  pm.test(\"Bad Request\")\r",
							"  break;\r",
							"\r",
							"  case 401:\r",
							"  pm.test(\"Unauthorized\")\r",
							"  break;\r",
							"\r",
							"  case 402:\r",
							"  pm.test(\"Payment Required\")\r",
							"  break;\r",
							"\r",
							"  case 403:\r",
							"  pm.test(\"Forbidden\")\r",
							"  break;\r",
							"\r",
							"  case 404:\r",
							"  pm.test(\"Not Found\")\r",
							"  break;\r",
							"\r",
							"  case 405:\r",
							"  pm.test(\"Method Not Allowed\")\r",
							"  break;\r",
							"\r",
							"   case 500:\r",
							"  pm.test(\"Internal Server Error\")\r",
							"  break;\r",
							"\r",
							"   case 501:\r",
							"  pm.test(\"Not Implemented\")\r",
							"  break;\r",
							"\r",
							"\r",
							"  case 502:\r",
							"  pm.test(\"Bad Gateway\")\r",
							"  break;\r",
							"\r",
							"  case 503:\r",
							"  pm.test(\"Service Unavailable\")\r",
							"  break;\r",
							"        pm.globals.get(\"variable_key\");\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update  Student Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response =responseCode.code;\r",
							"\r",
							"switch(response){\r",
							" case 200:\r",
							" var jsonData =pm.response.json()\r",
							" pm.test(\" update  data success \",function(){\r",
							"pm.expect(jsonData.msg).to.eql(\"update  data success\");\r",
							"   \r",
							" })\r",
							"\r",
							" break;\r",
							"\r",
							"  case 202:\r",
							"  pm.test(\" This is accepted\")\r",
							"  break;\r",
							"\r",
							"  case 302:\r",
							"  pm.test(\"Found\")\r",
							"  break;\r",
							"\r",
							"  case 304:\r",
							"  pm.test(\"This is not modified\")\r",
							"  break;\r",
							"\r",
							"  case 400:\r",
							"  pm.test(\"Bad Request\")\r",
							"  break;\r",
							"\r",
							"  case 401:\r",
							"  pm.test(\"Unauthorized\")\r",
							"  break;\r",
							"\r",
							"  case 402:\r",
							"  pm.test(\"Payment Required\")\r",
							"  break;\r",
							"\r",
							"  case 403:\r",
							"  pm.test(\"Forbidden\")\r",
							"  break;\r",
							"\r",
							"  case 404:\r",
							"  pm.test(\"Not Found\")\r",
							"  break;\r",
							"\r",
							"  case 405:\r",
							"  pm.test(\"Method Not Allowed\")\r",
							"  break;\r",
							"\r",
							"   case 500:\r",
							"  pm.test(\"Internal Server Error\")\r",
							"  break;\r",
							"\r",
							"   case 501:\r",
							"  pm.test(\"Not Implemented\")\r",
							"  break;\r",
							"\r",
							"\r",
							"  case 502:\r",
							"  pm.test(\"Bad Gateway\")\r",
							"  break;\r",
							"\r",
							"  case 503:\r",
							"  pm.test(\"Service Unavailable\")\r",
							"  break;\r",
							"        pm.globals.get(\"variable_key\");\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName =pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"firstName\",firstName);\r",
							"console.log(\"firstName\", firstName)\r",
							"\r",
							"var middleName =pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"middleName\",middleName);\r",
							"console.log(\"middleName\", middleName)\r",
							"\r",
							"var lastName =pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"lastName\",lastName);\r",
							"console.log(\"lastName\", lastName)\r",
							"\r",
							"//Genrate random Date of Birth in MM/DD/YY Format and the DOB always fall in between 1990 and 1999\r",
							"function randomDate(start, end) {\r",
							"        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"}\r",
							"var date = randomDate(new Date(2000, 0, 1), new Date());\r",
							"var year_last_integer = Math.floor(Math.random() * 10);\r",
							"var formattedDate = (date.getMonth()+1) + '/' + date.getDate() + '/' +  '199' + year_last_integer;\r",
							"pm.environment.set(\"dob\", formattedDate);\r",
							"console.log(\"DOB: \" + formattedDate);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"id\": \"{{id}}\",\r\n\"first_name\": \"{{firstName}}\", \r\n\"middle_name\": \"{{middleName}}\", \r\n\"last_name\": \"{{lastName}}\", \r\n\"date_of_birth\": \"{{dob}}\" \r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student Validation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var response =responseCode.code;\r",
							"\r",
							"switch(response){\r",
							" case 200:\r",
							" var jsonData =pm.response.json()\r",
							" pm.test(\" Students firstName Validation \",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"first_Name\"));\r",
							"   //console.log(jsonData.data.first_name)\r",
							" })\r",
							"\r",
							" pm.test(\" Students middle_Name Validation \",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.middle_Name).to.eql(pm.environment.get(\"middle_Name\"));\r",
							"   //console.log(jsonData.data.middle_Name)\r",
							" })\r",
							"\r",
							"pm.test(\" Students last_Name Validation \",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.last_Name).to.eql(pm.environment.get(\"last_Name\"));\r",
							"   //console.log(jsonData.data.last_Name)\r",
							" })\r",
							"\r",
							" pm.test(\"Students date_of_birth Validation \",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.date_of_birth ).to.eql(pm.environment.get(\"date_of_birth \"));\r",
							"   //console.log(jsonData.data.date_of_birth )\r",
							" })\r",
							"\r",
							"\r",
							"\r",
							" break;\r",
							"\r",
							"  case 202:\r",
							"  pm.test(\" This is accepted\")\r",
							"  break;\r",
							"\r",
							"  case 302:\r",
							"  pm.test(\"Found\")\r",
							"  break;\r",
							"\r",
							"  case 304:\r",
							"  pm.test(\"This is not modified\")\r",
							"  break;\r",
							"\r",
							"  case 400:\r",
							"  pm.test(\"Bad Request\")\r",
							"  break;\r",
							"\r",
							"  case 401:\r",
							"  pm.test(\"Unauthorized\")\r",
							"  break;\r",
							"\r",
							"  case 402:\r",
							"  pm.test(\"Payment Required\")\r",
							"  break;\r",
							"\r",
							"  case 403:\r",
							"  pm.test(\"Forbidden\")\r",
							"  break;\r",
							"\r",
							"  case 404:\r",
							"  pm.test(\"Not Found\")\r",
							"  break;\r",
							"\r",
							"  case 405:\r",
							"  pm.test(\"Method Not Allowed\")\r",
							"  break;\r",
							"\r",
							"   case 500:\r",
							"  pm.test(\"Internal Server Error\")\r",
							"  break;\r",
							"\r",
							"   case 501:\r",
							"  pm.test(\"Not Implemented\")\r",
							"  break;\r",
							"\r",
							"\r",
							"  case 502:\r",
							"  pm.test(\"Bad Gateway\")\r",
							"  break;\r",
							"\r",
							"  case 503:\r",
							"  pm.test(\"Service Unavailable\")\r",
							"  break;\r",
							"        pm.globals.get(\"variable_key\");\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create  Students Technical Skills",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response =responseCode.code;\r",
							"\r",
							"switch(response){\r",
							" case 200:\r",
							" var jsonData =pm.response.json()\r",
							" pm.test(\"Add data success\", function(){\r",
							" pm.expect(jsonData.msg).to.eql(\"Add  data success\")\r",
							"\r",
							" })\r",
							"\r",
							" break;\r",
							"\r",
							"  case 202:\r",
							"  pm.test(\" This is accepted\")\r",
							"  break;\r",
							"\r",
							"  case 302:\r",
							"  pm.test(\"Found\")\r",
							"  break;\r",
							"\r",
							"  case 304:\r",
							"  pm.test(\"This is not modified\")\r",
							"  break;\r",
							"\r",
							"  case 400:\r",
							"  pm.test(\"Bad Request\")\r",
							"  break;\r",
							"\r",
							"  case 401:\r",
							"  pm.test(\"Unauthorized\")\r",
							"  break;\r",
							"\r",
							"  case 402:\r",
							"  pm.test(\"Payment Required\")\r",
							"  break;\r",
							"\r",
							"  case 403:\r",
							"  pm.test(\"Forbidden\")\r",
							"  break;\r",
							"\r",
							"  case 404:\r",
							"  pm.test(\"Not Found\")\r",
							"  break;\r",
							"\r",
							"  case 405:\r",
							"  pm.test(\"Method Not Allowed\")\r",
							"  break;\r",
							"\r",
							"   case 500:\r",
							"  pm.test(\"Internal Server Error\")\r",
							"  break;\r",
							"\r",
							"   case 501:\r",
							"  pm.test(\"Not Implemented\")\r",
							"  break;\r",
							"\r",
							"\r",
							"  case 502:\r",
							"  pm.test(\"Bad Gateway\")\r",
							"  break;\r",
							"\r",
							"  case 503:\r",
							"  pm.test(\"Service Unavailable\")\r",
							"  break;\r",
							"        pm.globals.get(\"variable_key\");\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var yearexp = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(\"yearexp\",yearexp)\r",
							"pm.environment.set(\"yearexp\",yearexp)\r",
							"\r",
							"\r",
							"//Genrate random Date of Birth in MM/DD/YY Format and the DOB always fall in between 1990 and 1999\r",
							"function randomDate(start, end) {\r",
							"        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\r",
							"}\r",
							"var date = randomDate(new Date(2000, 0, 1), new Date());\r",
							"var year_last_integer = Math.floor(Math.random() * 10);\r",
							"var formattedDate = (date.getMonth()+1) + '/' + date.getDate() + '/' +  '199' + year_last_integer;\r",
							"pm.environment.set(\"lastused\", formattedDate);\r",
							"console.log(\"lastused: \" + formattedDate);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"id\": 1099999, \r\n\"language\": [ \r\n\"English\", \r\n\"Bangla\" \r\n], \r\n\"yearexp\": \"{{yearexp}}\", \r\n\"lastused\": \"{{lastused}}\", \r\n\"st_id\":  \"{{id}}\"\r\n} \r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/technicalskills",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"technicalskills"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response =responseCode.code;\r",
							"\r",
							"switch(response){\r",
							" case 200:\r",
							" var jsonData =pm.response.json()\r",
							"\r",
							"pm.test(\"true\", function(){\r",
							" pm.expect(jsonData.status).to.eql(\"true\")\r",
							"\r",
							" })\r",
							"\r",
							" pm.test(\"Add data success\", function(){\r",
							" pm.expect(jsonData.msg).to.eql(\"Add  data success\")\r",
							"\r",
							" })\r",
							"\r",
							" break;\r",
							"\r",
							"  case 202:\r",
							"  pm.test(\" This is accepted\")\r",
							"  break;\r",
							"\r",
							"  case 302:\r",
							"  pm.test(\"Found\")\r",
							"  break;\r",
							"\r",
							"  case 304:\r",
							"  pm.test(\"This is not modified\")\r",
							"  break;\r",
							"\r",
							"  case 400:\r",
							"  pm.test(\"Bad Request\")\r",
							"  break;\r",
							"\r",
							"  case 401:\r",
							"  pm.test(\"Unauthorized\")\r",
							"  break;\r",
							"\r",
							"  case 402:\r",
							"  pm.test(\"Payment Required\")\r",
							"  break;\r",
							"\r",
							"  case 403:\r",
							"  pm.test(\"Forbidden\")\r",
							"  break;\r",
							"\r",
							"  case 404:\r",
							"  pm.test(\"Not Found\")\r",
							"  break;\r",
							"\r",
							"  case 405:\r",
							"  pm.test(\"Method Not Allowed\")\r",
							"  break;\r",
							"\r",
							"   case 500:\r",
							"  pm.test(\"Internal Server Error\")\r",
							"  break;\r",
							"\r",
							"   case 501:\r",
							"  pm.test(\"Not Implemented\")\r",
							"  break;\r",
							"\r",
							"\r",
							"  case 502:\r",
							"  pm.test(\"Bad Gateway\")\r",
							"  break;\r",
							"\r",
							"  case 503:\r",
							"  pm.test(\"Service Unavailable\")\r",
							"  break;\r",
							"        pm.globals.get(\"variable_key\");\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var houseNumber = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(\"houseNumber\",houseNumber)\r",
							"pm.environment.set(\"houseNumber\",houseNumber)\r",
							"\r",
							"var City= pm.variables.replaceIn(\"{{$randomCity}}\")\r",
							"console.log(\"City\", City)\r",
							"pm.environment.set(\"City\",City)\r",
							"\r",
							"\r",
							"var state = pm.variables.replaceIn(\"{{$randomStreetName}}\")\r",
							"console.log(\"state\",state)\r",
							"pm.environment.set(\"state\",state)\r",
							"\r",
							"\r",
							"var Country = pm.variables.replaceIn(\"{{$randomCountry}}\")\r",
							"console.log(\"Country\", Country)\r",
							"pm.environment.set(\"Country\",Country)\r",
							"\r",
							"\r",
							"var Std_Code = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(\"Std_Code\",Std_Code)\r",
							"pm.environment.set(\"Std_Code\",Std_Code)\r",
							"\r",
							"var Std_Code1 = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(\"Std_Code1\",Std_Code1)\r",
							"pm.environment.set(\"Std_Code1\",Std_Code1)\r",
							"\r",
							"\r",
							"var Home = pm.variables.replaceIn(\"{{$randomStreetName}}\")\r",
							"console.log(\"Home\",Home)\r",
							"pm.environment.set(\"Home\",Home)\r",
							"\r",
							"var Home2 = pm.variables.replaceIn(\"{{$randomStreetName}}\")\r",
							"console.log(\"Home2\",Home2)\r",
							"pm.environment.set(\"Home2\",Home2)\r",
							"\r",
							"\r",
							"var Mobile = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\")\r",
							"console.log(\"Mobile\",Mobile)\r",
							"pm.environment.set(\"Mobile\",Mobile)\r",
							"\r",
							"\r",
							"var Mobile2 = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\")\r",
							"console.log(\"Mobile2\",Mobile2)\r",
							"pm.environment.set(\"Mobile2\",Mobile2)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"Permanent_Address\": { \r\n\r\n\"House_Number\": \"{{houseNumber}}\",\r\n\"City\": \"{{city}}\",\r\n \"State\": \"{{state}}\", \r\n\"Country\": \"{{country}}\",\r\n\"PhoneNumber\": [ \r\n{ \r\n\"Std_Code\": \"{{Std_Code}}\",\r\n\"Home\": \"{{Home}}\",\r\n \"Mobile\": \"{{Mobile}}\" \r\n},\r\n{ \r\n\"Std_Code\": \"{{Std_Code1}}\",\r\n\"Home\": \"{{Home2}}\", \r\n\"Mobile\": \"{{Mobile2}}\" \r\n} \r\n] \r\n},\r\n\"stId\": \"{{id}}\" \r\n} \r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/addresses",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "FINAL STUDENT DETAILS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response =responseCode.code;\r",
							"\r",
							"switch(response){\r",
							" case 200:\r",
							" var jsonData =pm.response.json()\r",
							"\r",
							" //First Name Validation\r",
							"     pm.test(\" Students firstName Validation \",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"     pm.expect(jsonData.first_name).to.eql(pm.environment.get(\"first_Name\"));\r",
							"     //console.log(jsonData.data.first_name)\r",
							"     })\r",
							"\r",
							"//Middle Name Validation\r",
							"    pm.test(\" Students middle_Name Validation \",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.middle_Name).to.eql(pm.environment.get(\"middle_Name\"));\r",
							"    //console.log(jsonData.data.middle_Name)\r",
							"    })\r",
							"\r",
							"//Last Name Validation\r",
							"    pm.test(\" Students last_Name Validation \",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.last_Name).to.eql(pm.environment.get(\"last_Name\"));\r",
							"    //console.log(jsonData.data.last_Name)\r",
							"    })\r",
							"\r",
							"//Date of Birth Validation\r",
							"    pm.test(\"Students date_of_birth Validation \",function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.date_of_birth ).to.eql(pm.environment.get(\"date_of_birth \"));\r",
							"    //console.log(jsonData.data.date_of_birth )\r",
							"    })\r",
							"\r",
							"//Language Validation    \r",
							"    pm.test(\" Students language Validation\", function(){\r",
							"    pm.expect(jsonData.data.TechnicalDetails[0].language[0]).to.eql(\"English\")\r",
							"    pm.expect(jsonData.data.TechnicalDetails[0].language[1]).to.eql(\"Bangla\")\r",
							"    })\r",
							"\r",
							"//Year_Exp Validation\r",
							"    pm.test(\"Students year_exp \",function(){\r",
							"    pm.expect(jsonData.data.TechnicalDetails[0].year_exp).to.eql(pm.environment.get(\"year_exp\"))\r",
							"    //console.log(jsonData.data.date_of_birth )\r",
							"    })\r",
							"\r",
							"//lastused Validation\r",
							"    pm.test(\"Students lastused \",function(){\r",
							"    pm.expect(jsonData.data.TechnicalDetails[0].lastused).to.eql(pm.environment.get(\"lastused\"))\r",
							"    //console.log(jsonData.data.date_of_birth )\r",
							"    })\r",
							"\r",
							" \r",
							"//House Number Validation\r",
							"    pm.test(\"houseNumber\",function(){\r",
							"    pm.expect(jsonData.data.Address[0].Permanent_Address.House_Number).to.eql(pm.environment.get(\"houseNumber\"))\r",
							"    //console.log(jsonData.data.date_of_birth )\r",
							"    })\r",
							"\r",
							"//Country Validation\r",
							"    pm.test(\"Student Country Validation \",function(){\r",
							"    pm.expect(jsonData.data.Address[0].Permanent_Address.Country).to.eql(pm.environment.get(\"country\"))\r",
							"    //console.log(jsonData.data.date_of_birth )\r",
							"    })\r",
							"\r",
							"//City Validation    \r",
							"    pm.test(\" Student City\", function(){\r",
							"    pm.expect(jsonData.data.Address[0].Permanent_Address.City).to.eql(pm.environment.get(\"city\"));\r",
							"    })\r",
							"\r",
							"//Std_Code Validation\r",
							"   pm.test(\"Student Std_Code Validation \",function(){\r",
							"   pm.expect(jsonData.data.Address[0].Permanent_Address.PhoneNumber[0].Std_Code).to.eql(pm.environment.get(\"Std_Code\"))\r",
							"   //console.log(jsonData.data.date_of_birth )\r",
							"   })\r",
							"\r",
							"\r",
							"//Current Address Validation\r",
							"   pm.test(\"Students Current Address\", function(){\r",
							"   pm.expect(jsonData.data.Address[0].Current_Address).to.eql(null);\r",
							"   })\r",
							"\r",
							"//Mobile Validation\r",
							"   pm.test(\"Student Mobile Validation\", function(){\r",
							"   pm.expect(jsonData.data.Address[0].Permanent_Address.PhoneNumber[0].Mobile).to.eql(pm.environment.get(\"Mobile\"));\r",
							"  \r",
							"\r",
							"   \r",
							"   })\r",
							"\r",
							"//st_id Validation\r",
							"  // pm.test(\"Student st_id Validation\", function(){\r",
							"   //pm.expect(jsonData.data.TechnicalDetails[0].st_id).to.eql(\"10058186\");\r",
							"   //})\r",
							"\r",
							"\r",
							"   \r",
							"\r",
							"\r",
							"\r",
							" break;\r",
							"\r",
							"  case 202:\r",
							"  pm.test(\" This is accepted\")\r",
							"  break;\r",
							"\r",
							"  case 302:\r",
							"  pm.test(\"Found\")\r",
							"  break;\r",
							"\r",
							"  case 304:\r",
							"  pm.test(\"This is not modified\")\r",
							"  break;\r",
							"\r",
							"  case 400:\r",
							"  pm.test(\"Bad Request\")\r",
							"  break;\r",
							"\r",
							"  case 401:\r",
							"  pm.test(\"Unauthorized\")\r",
							"  break;\r",
							"\r",
							"  case 402:\r",
							"  pm.test(\"Payment Required\")\r",
							"  break;\r",
							"\r",
							"  case 403:\r",
							"  pm.test(\"Forbidden\")\r",
							"  break;\r",
							"\r",
							"  case 404:\r",
							"  pm.test(\"Not Found\")\r",
							"  break;\r",
							"\r",
							"  case 405:\r",
							"  pm.test(\"Method Not Allowed\")\r",
							"  break;\r",
							"\r",
							"   case 500:\r",
							"  pm.test(\"Internal Server Error\")\r",
							"  break;\r",
							"\r",
							"   case 501:\r",
							"  pm.test(\"Not Implemented\")\r",
							"  break;\r",
							"\r",
							"\r",
							"  case 502:\r",
							"  pm.test(\"Bad Gateway\")\r",
							"  break;\r",
							"\r",
							"  case 503:\r",
							"  pm.test(\"Service Unavailable\")\r",
							"  break;\r",
							"        \r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/FinalStudentDetails/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"FinalStudentDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Del msg",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}